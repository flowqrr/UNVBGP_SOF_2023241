// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sof_feleves.Repository;

#nullable disable

namespace sof_feleves.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppointmentSiteUser", b =>
                {
                    b.Property<string>("ApplicantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentsID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicantsId", "AppointmentsID");

                    b.HasIndex("AppointmentsID");

                    b.ToTable("AppointmentSiteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "d0e2b3dc-f76c-41d7-b422-c401dfecab6f",
                            Name = "Host",
                            NormalizedName = "HOST"
                        },
                        new
                        {
                            Id = "0",
                            ConcurrencyStamp = "753b4a61-aeb9-4b23-bcd8-9159aa9822a4",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "yoga_host1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "dance_host1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "nail_host1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "chiropractor_host1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sof_feleves.Models.Appointment", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxApplicants")
                        .HasColumnType("int");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            ID = "apt1",
                            Date = new DateTime(2025, 6, 28, 10, 0, 0, 0, DateTimeKind.Utc),
                            MaxApplicants = 10,
                            ServiceID = "yoga_class1"
                        },
                        new
                        {
                            ID = "apt2",
                            Date = new DateTime(2025, 6, 28, 12, 0, 0, 0, DateTimeKind.Utc),
                            MaxApplicants = 10,
                            ServiceID = "yoga_class1"
                        },
                        new
                        {
                            ID = "apt3",
                            Date = new DateTime(2025, 5, 5, 13, 30, 0, 0, DateTimeKind.Utc),
                            MaxApplicants = 1,
                            ServiceID = "nail_salon1"
                        },
                        new
                        {
                            ID = "apt4",
                            Date = new DateTime(2025, 7, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            MaxApplicants = 25,
                            ServiceID = "dance_class1"
                        },
                        new
                        {
                            ID = "apt5",
                            Date = new DateTime(2025, 7, 29, 19, 0, 0, 0, DateTimeKind.Utc),
                            MaxApplicants = 25,
                            ServiceID = "dance_class1"
                        },
                        new
                        {
                            ID = "apt6",
                            Date = new DateTime(2025, 8, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            MaxApplicants = 25,
                            ServiceID = "dance_class1"
                        });
                });

            modelBuilder.Entity("sof_feleves.Models.Post", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            ID = "post1",
                            ServiceID = "yoga_class1",
                            Text = "Yoga for your body and mind at the yoga studio with your yoga host",
                            Title = "Yoga classes"
                        },
                        new
                        {
                            ID = "post2",
                            ServiceID = "dance_class1",
                            Text = "Unfortunately I have to cancel today's dance class because I have COVID. :( See you guys next week!",
                            Title = "TODAY'S CLASS IS CANCELED!"
                        },
                        new
                        {
                            ID = "post3",
                            ServiceID = "nail_salon1",
                            Text = "Hello guys, someone left their Gucci bag at my studio. Please come pick it up!",
                            Title = "Gucci bag left at studio!!"
                        },
                        new
                        {
                            ID = "post4",
                            ServiceID = "chiropractor1",
                            Text = "Dear Guests, please make sure you don't make a mess after yourself when using the toilet at my office. I had to clean for hours after someone pooped there...",
                            Title = "Someone clogged the toilet at my office..."
                        });
                });

            modelBuilder.Entity("sof_feleves.Models.Service", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("HostID");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ID = "yoga_class1",
                            Description = "Yoga for your body and mind at the yoga studio with your yoga host",
                            HostID = "yoga_host1",
                            Location = "Yoga Studio in Budapest",
                            Name = "Yoga class"
                        },
                        new
                        {
                            ID = "dance_class1",
                            Description = "Contemporary dance class for creative minds",
                            HostID = "dance_host1",
                            Location = "Dance Studio in Paris",
                            Name = "Dance class"
                        },
                        new
                        {
                            ID = "nail_salon1",
                            Description = "Luxury Nail salon located in the heart of London<3",
                            HostID = "nail_host1",
                            Location = "London Nail Salon",
                            Name = "Nail salon"
                        },
                        new
                        {
                            ID = "chiropractor1",
                            Description = "Certified chiropractor - based in New York",
                            HostID = "chiropractor_host1",
                            Location = "New York",
                            Name = "Chiropractor"
                        });
                });

            modelBuilder.Entity("sof_feleves.Models.SiteUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "yoga_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a7dee71-ef51-4ecc-af35-dea426a7b684",
                            Email = "yoga@yoga.yoga",
                            EmailConfirmed = false,
                            FirstName = "Yoga",
                            LockoutEnabled = false,
                            NormalizedUserName = "YOGA",
                            PasswordHash = "AQAAAAEAACcQAAAAEICZ12XvGDqfBQ4jKuuQq/lqsfNzOpRGa0pVCb0VJ26hyO9wwdZ1ovD7NK3bPJ6vqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fd8d2be-ae6c-4a66-a3bc-5d0ff65c1399",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "dance_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d7663e9-d63e-45ce-a7e9-42afce2749d3",
                            Email = "dance@dance.dance",
                            EmailConfirmed = false,
                            FirstName = "Dance",
                            LockoutEnabled = false,
                            NormalizedUserName = "DANCE",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfXKZ8UYLC9szKVwmO0fy9PrPna2yC4jb0ASL1NEqfIpwDX13KTnnPA9iWf7zCw0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "968876e3-bcca-4fa7-9560-e4013ffd4b3e",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "nail_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91826431-5b55-416d-ab74-9de2eb57d856",
                            Email = "nail@nail.nail",
                            EmailConfirmed = false,
                            FirstName = "Nail",
                            LockoutEnabled = false,
                            NormalizedUserName = "NAIL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDsKbQ1LFjJZC3nDASYcnbgo77Zo+/B2D6smVKOHmLqvGVShG5m22AfRVH58mRlTkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26a53218-1f98-4af9-b147-7f1d8de44d66",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "chiropractor_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97d95a05-de5d-4dd9-ad98-859154542e2f",
                            Email = "chiropractor@chiropractor.chiropractor",
                            EmailConfirmed = false,
                            FirstName = "Chiropractor",
                            LockoutEnabled = false,
                            NormalizedUserName = "CHIROPRACTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAELjA9UzQnOUlT8bgUXBOYzWK4QZnBwF6NzShBgCx0sTwj8EcROBHRwxlU6UGaSCn+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7228121-8e5e-41d9-81f7-2a3eb37e562b",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("AppointmentSiteUser", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sof_feleves.Models.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sof_feleves.Models.Appointment", b =>
                {
                    b.HasOne("sof_feleves.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("sof_feleves.Models.Post", b =>
                {
                    b.HasOne("sof_feleves.Models.Service", "Service")
                        .WithMany("Posts")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("sof_feleves.Models.Service", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", "Host")
                        .WithMany("HostedServices")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("sof_feleves.Models.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("sof_feleves.Models.SiteUser", b =>
                {
                    b.Navigation("HostedServices");
                });
#pragma warning restore 612, 618
        }
    }
}
