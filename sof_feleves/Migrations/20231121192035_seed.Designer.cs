// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sof_feleves.Repository;

#nullable disable

namespace sof_feleves.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231121192035_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppointmentSiteUser", b =>
                {
                    b.Property<string>("ApplicantsId")
                        .HasColumnType("text");

                    b.Property<string>("AppointmentsID")
                        .HasColumnType("text");

                    b.HasKey("ApplicantsId", "AppointmentsID");

                    b.HasIndex("AppointmentsID");

                    b.ToTable("AppointmentSiteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "a7c9a7c5-dec1-4c77-b81e-dd690be9953b",
                            Name = "Host",
                            NormalizedName = "HOST"
                        },
                        new
                        {
                            Id = "0",
                            ConcurrencyStamp = "64f0b2bc-4d79-4aaf-bf91-8a5adccbfcec",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "yoga_host1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "dance_host1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "nail_host1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "chiropractor_host1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sof_feleves.Models.Appointment", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxApplicants")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("sof_feleves.Models.Service", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("HostID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("HostID");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ID = "yoga_class1",
                            HostID = "yoga_host1",
                            Name = "Yoga class"
                        },
                        new
                        {
                            ID = "dance_class1",
                            HostID = "dance_host1",
                            Name = "Dance class"
                        },
                        new
                        {
                            ID = "nail_salon1",
                            HostID = "nail_host1",
                            Name = "Nail salon"
                        },
                        new
                        {
                            ID = "chiropractor1",
                            HostID = "chiropractor_host1",
                            Name = "Chiropractor"
                        });
                });

            modelBuilder.Entity("sof_feleves.Models.SiteUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "yoga_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "321f8e44-7ea4-40b2-ace9-c05ae3f41406",
                            Email = "yoga@yoga.yoga",
                            EmailConfirmed = false,
                            FirstName = "Yoga",
                            LockoutEnabled = false,
                            NormalizedUserName = "YOGA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPDO6yUSBRithW2+gkjGNqo4qMX++MUDeYe9Xjm2lwHlZwmcwUFNQH7N/p5+NeRd4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab3f10de-828d-49fa-9f6e-415107158cd1",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "dance_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a0ddd0e-4c10-4575-8127-b002d3c37322",
                            Email = "dance@dance.dance",
                            EmailConfirmed = false,
                            FirstName = "Dance",
                            LockoutEnabled = false,
                            NormalizedUserName = "DANCE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGQldynZ0yA1wxG+0iFn0PhgXIMiJH3kWUupp03TtffWygrZHskv+y8wzM/Sc/wJAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b369ffaa-1131-4e07-8dc7-24ab38b48299",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "nail_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71d65d3f-145f-43c0-9848-5e196744cd4d",
                            Email = "nail@nail.nail",
                            EmailConfirmed = false,
                            FirstName = "Nail",
                            LockoutEnabled = false,
                            NormalizedUserName = "NAIL",
                            PasswordHash = "AQAAAAEAACcQAAAAEEA35Ytag8/8H9AwpJjldWvSGc26weSyWS5Hg4RCBrHfgnEitvYR7zqDVIi17uD+Gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d3aba63-cfd9-4bb6-8318-a579f48935b4",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "chiropractor_host1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "642cb94d-da4f-4a09-8ed2-ca5d28b50d0d",
                            Email = "chiropractor@chiropractor.chiropractor",
                            EmailConfirmed = false,
                            FirstName = "Chiropractor",
                            LockoutEnabled = false,
                            NormalizedUserName = "CHIROPRACTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEPOGgLfVKHn78Lt51oGx/VNyP+RIcn0h3KwH5nYh6Bj6ksT79Zk9I0zxhaH5TBsiXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f108d814-c3d4-46d2-aa60-c2f59598d607",
                            SurName = "Master",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("AppointmentSiteUser", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sof_feleves.Models.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sof_feleves.Models.Appointment", b =>
                {
                    b.HasOne("sof_feleves.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("sof_feleves.Models.Service", b =>
                {
                    b.HasOne("sof_feleves.Models.SiteUser", "Host")
                        .WithMany("HostedServices")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("sof_feleves.Models.Service", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("sof_feleves.Models.SiteUser", b =>
                {
                    b.Navigation("HostedServices");
                });
#pragma warning restore 612, 618
        }
    }
}
